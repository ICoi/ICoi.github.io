<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="http://localhost:4000/jekyll-gitbook/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/jekyll-gitbook/" rel="alternate" type="text/html" /><updated>2025-01-27T00:36:57+09:00</updated><id>http://localhost:4000/jekyll-gitbook/feed.xml</id><title type="html">Jekyll Gitbook</title><subtitle>Build Jekyll site with the GitBook style.
</subtitle><author><name>HE Tao</name></author><entry><title type="html">Using Footnotes</title><link href="http://localhost:4000/jekyll-gitbook/jekyll/2023-12-12-footnotes.html" rel="alternate" type="text/html" title="Using Footnotes" /><published>2023-12-12T00:00:00+09:00</published><updated>2023-12-12T00:00:00+09:00</updated><id>http://localhost:4000/jekyll-gitbook/jekyll/footnotes</id><content type="html" xml:base="http://localhost:4000/jekyll-gitbook/jekyll/2023-12-12-footnotes.html"><![CDATA[<p>This jekyll-theme supports <a href="https://www.mathjax.org/">MathJax</a> to render footnotes
in markdown.</p>

<p>e.g.,</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>The well known Pythagorean theorem $x^2 + y^2 = z^2$ was
proved to be invalid for other exponents[^1].
Meaning the next equation has no integer solutions:

$$ x^n + y^n = z^n $$
</code></pre></div></div>

<p>The well known Pythagorean theorem $x^2 + y^2 = z^2$ was
proved to be invalid for other exponents<sup id="fnref:1"><a href="#fn:1" class="footnote" rel="footnote" role="doc-noteref">1</a></sup>.
Meaning the next equation has no integer solutions:</p>

\[x^n + y^n = z^n\]

<h2 id="long-contents">Long contents</h2>

<p>long contents …..</p>

<ol>
  <li>a</li>
  <li>b</li>
  <li>c</li>
  <li>d</li>
</ol>

<h3 id="sub-title-1">Sub title 1</h3>

<h3 id="sub-title-2">Sub title 2</h3>

<h3 id="sub-title-3">Sub title 3</h3>

<h2 id="long-contents-1">Long contents</h2>

<p>long contents …..</p>

<ol>
  <li>a</li>
  <li>b</li>
  <li>c</li>
  <li>d</li>
</ol>

<h3 id="sub-title-1-1">Sub title 1</h3>

<h3 id="sub-title-2-1">Sub title 2</h3>

<h3 id="sub-title-3-1">Sub title 3</h3>

<h2 id="long-contents-2">Long contents</h2>

<p>long contents …..</p>

<ol>
  <li>a</li>
  <li>b</li>
  <li>c</li>
  <li>d</li>
</ol>

<h3 id="sub-title-1-2">Sub title 1</h3>

<h3 id="sub-title-2-2">Sub title 2</h3>

<h3 id="sub-title-3-2">Sub title 3</h3>

<h2 id="long-contents-3">Long contents</h2>

<p>long contents …..</p>

<ol>
  <li>a</li>
  <li>b</li>
  <li>c</li>
  <li>d</li>
</ol>

<h3 id="sub-title-1-3">Sub title 1</h3>

<h3 id="sub-title-2-3">Sub title 2</h3>

<h3 id="sub-title-3-3">Sub title 3</h3>

<h2 id="long-contents-4">Long contents</h2>

<p>long contents …..</p>

<ol>
  <li>a</li>
  <li>b</li>
  <li>c</li>
  <li>d</li>
</ol>

<h3 id="sub-title-1-4">Sub title 1</h3>

<h3 id="sub-title-2-4">Sub title 2</h3>

<h3 id="sub-title-3-4">Sub title 3</h3>

<h2 id="long-contents-5">Long contents</h2>

<p>long contents …..</p>

<ol>
  <li>a</li>
  <li>b</li>
  <li>c</li>
  <li>d</li>
</ol>

<h3 id="sub-title-1-5">Sub title 1</h3>

<h3 id="sub-title-2-5">Sub title 2</h3>

<h3 id="sub-title-3-5">Sub title 3</h3>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1">
      <p><a href="https://en.wikipedia.org/wiki/Fermat%27s_Last_Theorem">https://en.wikipedia.org/wiki/Fermat%27s_Last_Theorem</a> <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>Tao He</name></author><category term="Jekyll" /><summary type="html"><![CDATA[This jekyll-theme supports MathJax to render footnotes in markdown.]]></summary></entry><entry><title type="html">MathJax and LaTeX</title><link href="http://localhost:4000/jekyll-gitbook/jekyll/2023-10-14-math-latex.html" rel="alternate" type="text/html" title="MathJax and LaTeX" /><published>2023-10-14T00:00:00+09:00</published><updated>2023-10-14T00:00:00+09:00</updated><id>http://localhost:4000/jekyll-gitbook/jekyll/math-latex</id><content type="html" xml:base="http://localhost:4000/jekyll-gitbook/jekyll/2023-10-14-math-latex.html"><![CDATA[<p>This jekyll-theme supports <a href="https://www.mathjax.org/">MathJax</a> to render $\LaTeX$
and mathematics expressions.</p>

<blockquote class="block-tip">
  <h5 id="tip">TIP</h5>

  <p>Currently, Kramdown uses double dollar sign delimiters for inline and display math:
<a href="https://kramdown.gettalong.org/syntax.html#math-blocks">https://kramdown.gettalong.org/syntax.html#math-blocks</a>.</p>
</blockquote>

<p>e.g.,</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>The well known Pythagorean theorem $x^2 + y^2 = z^2$ was
proved to be invalid for other exponents.
Meaning the next equation has no integer solutions:

$$ x^n + y^n = z^n $$
</code></pre></div></div>

<p>The well known Pythagorean theorem $x^2 + y^2 = z^2$ was
proved to be invalid for other exponents.
Meaning the next equation has no integer solutions:</p>

\[x^n + y^n = z^n\]

<p>Another example with more complex markups:</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>When $a <span class="se">\n</span>e 0$, there are two solutions to $ax^2 + bx + c = 0$ and they are

$$x = {-b <span class="se">\p</span>m <span class="se">\s</span>qrt{b^2-4ac} <span class="se">\o</span>ver 2a}.$$
</code></pre></div></div>

<p>When $a \ne 0$, there are two solutions to $ax^2 + bx + c = 0$ and they are</p>

\[x = {-b \pm \sqrt{b^2-4ac} \over 2a}.\]

<p>Refer to the <a href="https://docs.mathjax.org/en/latest/index.html">MathJax website</a> for more examples.</p>]]></content><author><name>Tao He</name></author><category term="Jekyll" /><summary type="html"><![CDATA[This jekyll-theme supports MathJax to render $\LaTeX$ and mathematics expressions.]]></summary></entry><entry><title type="html">Diagrams with mermaid.js</title><link href="http://localhost:4000/jekyll-gitbook/jekyll/2023-08-31-mermaid.html" rel="alternate" type="text/html" title="Diagrams with mermaid.js" /><published>2023-08-31T00:00:00+09:00</published><updated>2023-08-31T00:00:00+09:00</updated><id>http://localhost:4000/jekyll-gitbook/jekyll/mermaid</id><content type="html" xml:base="http://localhost:4000/jekyll-gitbook/jekyll/2023-08-31-mermaid.html"><![CDATA[<p>This jekyll-theme supports <a href="https://mermaid.js.org/">mermaid.js</a> to render diagrams
in markdown.</p>

<p>To enable the mermaid support, you need to set <code class="language-plaintext highlighter-rouge">mermaid: true</code> in the front matter
of your post.</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">---</span>
<span class="na">title</span><span class="pi">:</span> <span class="s">Diagrams with mermaid.js</span>
<span class="na">date</span><span class="pi">:</span> <span class="s">2023-08-31</span>
<span class="na">layout</span><span class="pi">:</span> <span class="s">post</span>
<span class="na">mermaid</span><span class="pi">:</span> <span class="kc">true</span>
<span class="nn">---</span>
</code></pre></div></div>

<p>Then you can use mermaid syntax in your markdown:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>graph TD;
    A--&gt;B;
    A--&gt;C;
    B--&gt;D;
    C--&gt;D;
</code></pre></div></div>

<pre><code class="language-mermaid">graph TD;
    A--&gt;B;
    A--&gt;C;
    B--&gt;D;
    C--&gt;D;
</code></pre>

<p>Or, even some complex examples:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sequenceDiagram
    participant Alice
    participant Bob
    Alice-&gt;&gt;John: Hello John, how are you?
    loop Healthcheck
        John-&gt;&gt;John: Fight against hypochondria
    end
    Note right of John: Rational thoughts &lt;br/&gt;prevail!
    John--&gt;&gt;Alice: Great!
    John-&gt;&gt;Bob: How about you?
    Bob--&gt;&gt;John: Jolly good!
</code></pre></div></div>

<pre><code class="language-mermaid">sequenceDiagram
    participant Alice
    participant Bob
    Alice-&gt;&gt;John: Hello John, how are you?
    loop Healthcheck
        John-&gt;&gt;John: Fight against hypochondria
    end
    Note right of John: Rational thoughts &lt;br/&gt;prevail!
    John--&gt;&gt;Alice: Great!
    John-&gt;&gt;Bob: How about you?
    Bob--&gt;&gt;John: Jolly good!
</code></pre>

<p>Refer to the <a href="https://mermaid.js.org/intro/">mermaid.js website</a> for more examples.</p>]]></content><author><name>Tao He</name></author><category term="Jekyll" /><summary type="html"><![CDATA[This jekyll-theme supports mermaid.js to render diagrams in markdown.]]></summary></entry><entry><title type="html">Tips, Warnings, and Dangers</title><link href="http://localhost:4000/jekyll-gitbook/jekyll/2022-06-30-tips_warnings_dangers.html" rel="alternate" type="text/html" title="Tips, Warnings, and Dangers" /><published>2022-06-30T00:00:00+09:00</published><updated>2022-06-30T00:00:00+09:00</updated><id>http://localhost:4000/jekyll-gitbook/jekyll/tips_warnings_dangers</id><content type="html" xml:base="http://localhost:4000/jekyll-gitbook/jekyll/2022-06-30-tips_warnings_dangers.html"><![CDATA[<p>This jekyll-theme supports tips, warnings, and dangers blocks and the style is referred
from <a href="https://discordjs.guide/popular-topics/canvas.html#setting-up-napi-rs-canvas">the discord.js website</a>.</p>

<p>You could have the following <a href="https://kramdown.gettalong.org/quickref.html#block-attributes">markdown attributes (supported by kramdown)</a>:</p>

<h3 id="tips">Tips</h3>

<p>Using a <code class="language-plaintext highlighter-rouge">{: .block-tip}</code> attribute:</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gt">&gt; ##### TIP</span>
<span class="gt">&gt;</span>
<span class="gt">&gt; This guide is last tested with @napi-rs/canvas^0.1.20, so make sure you have</span>
<span class="gt">&gt; this or a similar version after installation.</span>
{: .block-tip }
</code></pre></div></div>

<blockquote class="block-tip">
  <h5 id="tip">TIP</h5>

  <p>This guide is last tested with @napi-rs/canvas^0.1.20, so make sure you have
this or a similar version after installation.</p>
</blockquote>

<h3 id="warnings">Warnings</h3>

<p>Using a <code class="language-plaintext highlighter-rouge">{: .block-warning}</code> attribute:</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gt">&gt; ##### WARNING</span>
<span class="gt">&gt;</span>
<span class="gt">&gt; Be sure that you're familiar with things like async/await and object destructuring</span>
<span class="gt">&gt; before continuing, as we'll be making use of features like these.</span>
{: .block-warning }
</code></pre></div></div>

<blockquote class="block-warning">
  <h5 id="warning">WARNING</h5>

  <p>Be sure that you’re familiar with things like async/await and object destructuring
before continuing, as we’ll be making use of features like these.</p>
</blockquote>

<h3 id="dangers">Dangers</h3>

<p>Using a <code class="language-plaintext highlighter-rouge">{: .block-danger}</code> attribute:</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gt">&gt; ##### DANGER</span>
<span class="gt">&gt;</span>
<span class="gt">&gt; You cannot delete an ephemeral message.</span>
{: .block-danger }
</code></pre></div></div>

<blockquote class="block-danger">
  <h5 id="danger">DANGER</h5>

  <p>You cannot delete an ephemeral message.</p>
</blockquote>]]></content><author><name>Tao He</name></author><category term="Jekyll" /><summary type="html"><![CDATA[This jekyll-theme supports tips, warnings, and dangers blocks and the style is referred from the discord.js website.]]></summary></entry><entry><title type="html">Wide tables</title><link href="http://localhost:4000/jekyll-gitbook/jekyll/2022-06-26-wide_tables.html" rel="alternate" type="text/html" title="Wide tables" /><published>2022-06-26T00:00:00+09:00</published><updated>2022-06-26T00:00:00+09:00</updated><id>http://localhost:4000/jekyll-gitbook/jekyll/wide_tables</id><content type="html" xml:base="http://localhost:4000/jekyll-gitbook/jekyll/2022-06-26-wide_tables.html"><![CDATA[<p>A wide tables needs to be wrapped into a <code class="language-plaintext highlighter-rouge">div</code> with class <code class="language-plaintext highlighter-rouge">table-wrapper</code>
to make sure it displayed as expected on mobile devices. For example,</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"table-wrapper"</span> <span class="na">markdown=</span><span class="s">"block"</span><span class="nt">&gt;</span>

|title1|title2|title3|title4|title5|title6|title7|title8|
|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|
|1|2|3|4|5|6|7|8|
|1|2|3|4|5|6|7|8|
|1|2|3|4|5|6|7|8|
|1|2|3|4|5|6|7|8|

<span class="nt">&lt;/div&gt;</span>
</code></pre></div></div>

<p>Will be rendered as</p>

<div class="table-wrapper">

  <table>
    <thead>
      <tr>
        <th style="text-align: center">title1</th>
        <th style="text-align: center">title2</th>
        <th style="text-align: center">title3</th>
        <th style="text-align: center">title4</th>
        <th style="text-align: center">title5</th>
        <th style="text-align: center">title6</th>
        <th style="text-align: center">title7</th>
        <th style="text-align: center">title8</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td style="text-align: center">1</td>
        <td style="text-align: center">2</td>
        <td style="text-align: center">3</td>
        <td style="text-align: center">4</td>
        <td style="text-align: center">5</td>
        <td style="text-align: center">6</td>
        <td style="text-align: center">7</td>
        <td style="text-align: center">8</td>
      </tr>
      <tr>
        <td style="text-align: center">1</td>
        <td style="text-align: center">2</td>
        <td style="text-align: center">3</td>
        <td style="text-align: center">4</td>
        <td style="text-align: center">5</td>
        <td style="text-align: center">6</td>
        <td style="text-align: center">7</td>
        <td style="text-align: center">8</td>
      </tr>
      <tr>
        <td style="text-align: center">1</td>
        <td style="text-align: center">2</td>
        <td style="text-align: center">3</td>
        <td style="text-align: center">4</td>
        <td style="text-align: center">5</td>
        <td style="text-align: center">6</td>
        <td style="text-align: center">7</td>
        <td style="text-align: center">8</td>
      </tr>
      <tr>
        <td style="text-align: center">1</td>
        <td style="text-align: center">2</td>
        <td style="text-align: center">3</td>
        <td style="text-align: center">4</td>
        <td style="text-align: center">5</td>
        <td style="text-align: center">6</td>
        <td style="text-align: center">7</td>
        <td style="text-align: center">8</td>
      </tr>
    </tbody>
  </table>

</div>]]></content><author><name>Tao He</name></author><category term="Jekyll" /><summary type="html"><![CDATA[A wide tables needs to be wrapped into a div with class table-wrapper to make sure it displayed as expected on mobile devices. For example,]]></summary></entry><entry><title type="html">Page with cover image</title><link href="http://localhost:4000/jekyll-gitbook/jekyll/2022-05-24-page_cover.html" rel="alternate" type="text/html" title="Page with cover image" /><published>2022-05-24T00:00:00+09:00</published><updated>2022-05-24T00:00:00+09:00</updated><id>http://localhost:4000/jekyll-gitbook/jekyll/page_cover</id><content type="html" xml:base="http://localhost:4000/jekyll-gitbook/jekyll/2022-05-24-page_cover.html"><![CDATA[<p>The jekyll-gitbook theme supports adding a cover image to a specific page by adding
a <code class="language-plaintext highlighter-rouge">cover</code> field to the page metadata:</p>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  ---
  title: Page with cover image
  author: Tao He
  date: 2022-05-24
  category: Jekyll
  layout: post
<span class="gi">+ cover: /assets/jekyll-gitbook/dinosaur.gif
</span>  ---
</code></pre></div></div>]]></content><author><name>Tao He</name></author><category term="Jekyll" /><summary type="html"><![CDATA[The jekyll-gitbook theme supports adding a cover image to a specific page by adding a cover field to the page metadata:]]></summary></entry><entry><title type="html">Book Review - Clean Architecture</title><link href="http://localhost:4000/jekyll-gitbook/2021-09-26-CleanArchitecture.html" rel="alternate" type="text/html" title="Book Review - Clean Architecture" /><published>2021-09-26T00:00:00+09:00</published><updated>2021-09-26T00:00:00+09:00</updated><id>http://localhost:4000/jekyll-gitbook/CleanArchitecture</id><content type="html" xml:base="http://localhost:4000/jekyll-gitbook/2021-09-26-CleanArchitecture.html"><![CDATA[<h1 id="책-리뷰---clean-architecture">책 리뷰 - Clean Architecture</h1>
<ul>
  <li>이 글은 Clean Architecture 책의 내용 일부를 발췌하여 작성하였습니다. 자세한 설명 및 내용은 도서를 참고하시면 됩니다.</li>
</ul>

<h1 id="1부-소개">1부. 소개</h1>

<h2 id="1장-설계와-아키텍처란">1장 설계와 아키텍처란?</h2>
<ul>
  <li>소프트웨어 아키텍처의 목표는 필요한 시스템을 만들고 유지보수하는데 투입되는 인력을 최소화하는 데 있다.</li>
  <li>투입 직원수↑  ➢  생산성은 일정 수준에 수렴함 ➢ 투입 대비 생산성↓
➢ 아키텍처 존재시 엉망으로 만들 때 보다 생산성↑</li>
</ul>

<h2 id="2장-두가지-가치에-대한-이야기">2장 두가지 가치에 대한 이야기</h2>
<h3 id="가치-1-행위behavior">가치 1. 행위(Behavior)</h3>
<ul>
  <li>프로그래머는 이해 관계자가 기능 명세서나 요구사항 문서를 구체화 할 수 있도록 도움.</li>
  <li>또한, 이러한 요구사항을 만족하도록 코드 작성.
    <h3 id="가치-2-아키텍처architecture">가치 2. 아키텍처(Architecture)</h3>
  </li>
  <li>‘소프트(Soft) 웨어’ - 기계의 행위를 Soft(쉽게) 변경 할 수 있어야 함</li>
  <li>아키텍처가 특정 형태를 다른 형태보다 선호하면 할수록, 새로운 기능을 이 구조에 맞추는게 더 힘들어짐</li>
  <li>아키텍처는 형태에 독립적이여야 하고, 그럴수록 더 실용적이다.</li>
</ul>

<p>행위(Behavior) &lt; 아키텍처(Architecture) : 아키텍처가 후순위가 되면 시스템 개발비용↑, 혹은 기능변경이 불가능 해 질 수도</p>

<h1 id="2부-벽돌부터-시작하기-프로그래밍-패러다임">2부. 벽돌부터 시작하기: 프로그래밍 패러다임</h1>
<h2 id="3장-패러다임-개요">3장. 패러다임 개요</h2>
<ul>
  <li>패러다임이란?
    <ul>
      <li>프로그래밍을 하는 방법. 어떤 프로그래밍 구조를 사용할지, 언제 구조를 사용해야 하는지 결정</li>
      <li>구조적 프로그래밍 : 제어흐름의 직접적인 전환에 대해 규칙을 부과 (if/while과 같은 제어, 반복문 활용)</li>
      <li>객체 지향 프로그래밍 : 제어흐름의 간접적인 전환에 대해 규칙을 부과</li>
      <li>함수형 프로그래밍 : 할당문에 대해 규칙 부과 (변수 할당에 부과되는 규율)
패러다임은 무엇을 해야 할 지 보다는 무엇을 해서는 안되는지를 말해준다.</li>
    </ul>
  </li>
</ul>

<h2 id="4장-구조적-프로그래밍">4장. 구조적 프로그래밍</h2>
<pre>
* 분기, 반복(if, while)이라는 단순 제어 + 순차 실행 (sequential execution) ➢ 특별한 장점
                    ⍒
  복잡한 요구사항을 더 작은 기능 단위로 분해.
  대규모 시스템 → 모듈과 컴포넌트 → 입증 할 수 있는 아주 작은 기능으로 세분화
                    ⍒
테스트를 통해 버그가 없음을 증명 ➢ 안정적인 서비스 제공
</pre>

<h2 id="5장-객체지향-프로그래밍">5장. 객체지향 프로그래밍</h2>
<ul>
  <li>
    <p>OO(Object-Oriented) 본질 : 캡슐화, 상속, <strong>다형성⭐︎</strong></p>
  </li>
  <li>
    <p>다형성 &lt;/br&gt;
 ⤷ 의존성 역전(dependency inversion) : 소프트웨어 아키텍트는 시스템의 소스코드 의존성 전부에 대해 방향을 결정할 수 있는 절대적 권한 갖게 됨 &lt;/br&gt;
    ⤷ 기능컴포넌트 독립을 통해 ‘배포 독립성’, ‘개발 독립성’ 갖게 됨</p>
  </li>
</ul>

<h2 id="6장-함수형-프로그래밍">6장. 함수형 프로그래밍</h2>
<ul>
  <li>함수형은 ‘가변 변수’를 전혀 사용하지✖︎<br />
➢ 경합(race)조건, 교착 상태(dead lock) 조건, 동시 업데이트 (concurrent update) 문제 발생 가능성 ✖︎ &lt;/br&gt;
  ⤷ ‘불변 컴포넌트’ Level에서는 함수형 사용이 유리함</li>
</ul>

<h1 id="3부-설계-원칙">3부. 설계 원칙</h1>
<p>SOLID 원칙</p>
<ul>
  <li>함수와 데이터 구조를 클래스로 배치하는 방향, 그리고 이들 클래스를 서로 결합하는 방법을 설명&lt;/br&gt;
목적 1. 변경에 유연 2. 이해하기 쉽다. 3. 많은 소프트웨어 시스템에 사용 할 수 있는 컴포넌트의 기반이 된다.</li>
</ul>

<h2 id="7장-srp-단일-책임-원칙">7장. SRP: 단일 책임 원칙</h2>
<ul>
  <li>하나의 모듈은 오직 하나의 사용자 또는 이해 관계자에 대해서만 책임져야 한다.&lt;/br&gt;
 1액터 → 1 모듈</li>
</ul>

<p><img src="https://github.com/ICoi/ICoi.github.io/blob/master/images/20210926_1-1.png?raw=true" width="100%" /></p>

<h2 id="8장-ocp-개방-폐쇄-원칙">8장. OCP: 개방-폐쇄 원칙</h2>
<ul>
  <li>소프트웨어 개체의 행위는 확장 할 수 있어야 하지만, 이때 개체를 변경해서는 안된다.</li>
  <li>기능이 어떻게(how), 왜(why), 언제(when) 발생했는지에 따라 기능을 분리하고, 분리한 기능을 컴포넌트의 계층구조로 조직화. &lt;/br&gt;
⭐︎ 모든 컴포넌트는 단방향</li>
</ul>

<p><img src="https://github.com/ICoi/ICoi.github.io/blob/master/images/20210926_1-2.png?raw=true" width="100%" /></p>

<h2 id="9장-lsp-리스코프-치환-원칙">9장. LSP: 리스코프 치환 원칙</h2>
<ul>
  <li>하위 타입이 변경되더라도 상위 코드에 영향✖︎</li>
</ul>

<p><img src="https://github.com/ICoi/ICoi.github.io/blob/master/images/20210926_2-1.png?raw=true" width="100%" /></p>

<h2 id="10장-isp-인터페이스-분리-원칙">10장. ISP: 인터페이스 분리 원칙</h2>

<p><img src="https://github.com/ICoi/ICoi.github.io/blob/master/images/20210926_2-2.png?raw=true" width="100%" /></p>

<h2 id="11장-dip-의존성-역전-원칙">11장. DIP: 의존성 역전 원칙</h2>
<p>추상 인터페이스에 변경이 생기면 이를 구체화한 구현체들도 따라서 수정해야 한다.
반대로 구체적인 구현체에 변경이 생기더라도 그 구현체가 구현하는 인터페이스는 항상, 좀 더 정확히 말하면 대다수의 경우 변경될 필요가 없다.
따라서 인터페이스는 구현체보다 변동성이 낮다.</p>

<p>의존성 관리를 위해 추상 팩토리(Abstract Factory) 패턴 사용</p>

<p><img src="https://github.com/ICoi/ICoi.github.io/blob/master/images/20210926_2-3.png?raw=true" width="100%" /></p>

<h1 id="4부-컴포넌트-원칙">4부. 컴포넌트 원칙</h1>

<h2 id="12장-컴포넌트">12장. 컴포넌트</h2>
<ul>
  <li>컴포넌트 :
    <ul>
      <li>배포 단위, 시스템의 구성 요소로 배포될 수 있는 가장 작은 단위.</li>
      <li>잘 설계된 컴포넌트는 반드시 독립적으로 배포가능함. 따라서 독립적으로 개발 가능한 능력을 갖춰야 한다.</li>
    </ul>
  </li>
</ul>

<h2 id="13장-컴포넌트-응집도">13장. 컴포넌트 응집도</h2>
<ul>
  <li>응집도와 관련된 3가지 원칙
    <ol>
      <li>REP : 재사용 / 릴리즈 등가 원칙
        <ul>
          <li>재사용 단위는 릴리즈(release) 단위와 같다.</li>
          <li>즉, 단일 컴포넌트는 응집성 높은 클래스와 모듈들로 구성되어야 함. 컴포넌트를 규정하는 모든 모듈은 서로 공유하는 중요한 테마나 목적이 있어야 함.</li>
        </ul>
      </li>
      <li>CCP : 공통 폐쇄 원칙
        <ul>
          <li>동일한 이유로 동일한 시점에 변경되는 클래스를 같은 컴포넌트를 묶어라. 서로 다른 시점에 다른 이유로 변경되는 클래스는 다른 컴포넌트로 분리하라.</li>
          <li>즉, 단일 컴포넌트는 변경의 이유가 여러개 있어서는 안된다.</li>
        </ul>
      </li>
      <li>CRP : 공통 재사용 원칙
        <ul>
          <li>컴포넌트 사용자들을 필요하지 않는 것에 의존하게 강요하지 말라.</li>
          <li>한 컴포넌트에 속한 클래스들을 더 작게 그룹지을 수 없다. 즉, 그 중 일부 클래스에만 의존되고 다른 클래스와는 독립적일 수 없음.</li>
        </ul>
      </li>
    </ol>
  </li>
  <li>컴포넌트 응집도에 대한 균형 다이어그램
    <ul>
      <li>프로젝트 초기 : CCP가 REP 보다 중요 → 시간이 지나면서 CRP, REP가 더 중요해짐</li>
      <li>즉, 프로젝트의 컴포넌트 구조는 시간과 성숙도에 따라 변함</li>
    </ul>
  </li>
</ul>

<p><img src="https://github.com/ICoi/ICoi.github.io/blob/master/images/20210926_3-1.png?raw=true" width="100%" /></p>

<h2 id="14장-컴포넌트-결합">14장. 컴포넌트 결합</h2>
<ul>
  <li>컴포넌트 사이의 관계를 설명하는 3가지 원칙
    <ol>
      <li>ADP : 의존성 비순환 원칙</li>
    </ol>
    <ul>
      <li>컴포넌트 의존성 그래프에 속한 cycle이 있어서는 안된다.</li>
      <li>순환 cycle 존재시 → 단위 테스트가 힘듬. 컴포넌트 분리가 어려움. 개발/빌드 어려움</li>
      <li>순환 끊기 방법 1. 의존성 역전원칙(DIP) 적용. 2. 새로운 컴포넌트 생성</li>
    </ul>
  </li>
</ul>

<ol>
  <li>SDP : 안정된 의존성 원칙
    <ul>
      <li>안정성의 방향으로 (더 안정된 쪽에) 의존한다. (안정성 : 쉽게 움직이지 않는 상태)</li>
      <li>SDP를 준수하면 변경하기 어려운 모듈이 변경하기 쉽게 만들어진 모듈에 의존하지 않도록 만들 수 있다.</li>
    </ul>
  </li>
</ol>

<ul>
  <li>안정성 지표</li>
</ul>
<pre>
    I(불안정성) = Fan out / (Fan in + Fan out)
      I = 0 : 최고로 안정된 컴포넌트 (변경이 쉽다)
      I = 1 : 최고로 불안정한 컴포넌트 (변경 어려움)

    Fan in : 안으로 들어오는 의존성. 내부 클래스에 의존하는 컴포넌트 외부의 클래스 갯수
    Fan out : 바깥으로 나가는 의존성. 컴포넌트 외부의 클래스에 의존하는 컴포넌트 내부의 클래스 갯수

</pre>
<ul>
  <li>컴포넌트 성격에 따라 I 값 위치 정해짐</li>
</ul>

<ol>
  <li>AD(안정된 추상화 원칙)
    <ul>
      <li>컴포넌트는 안정된 정도 만큼만 추산되어야 한다. → 안정성과 추상화 사이의 관계 정의</li>
    </ul>
  </li>
</ol>

<ul>
  <li>추상화 정도 축정</li>
</ul>
<pre>
     A = Na / Nc
       A = 0 : 추상 클래스가 하나도 없음
       A = 1 : 추상 클래스만 포함
     
     Na : 컴포넌트의 추상 클래스와 인터페이스의 개수
     Nc : 컴포넌트의 클래스 개수
 </pre>

<p><img src="https://github.com/ICoi/ICoi.github.io/blob/master/images/20210926_3-2.png?raw=true" width="100%" /></p>

<ul>
  <li>D거리 측정</li>
</ul>
<pre>
     D 거리 = | A + I - 1 |
       0에 가까울 수록 주계열 근처.
  </pre>
<ul>
  <li>주계열 (Main Stream)에 위치한 것이 가장 안정적인 상태이다.</li>
</ul>

<h1 id="5부-아키텍처">5부. 아키텍처</h1>

<h2 id="15장-아키텍처란">15장. 아키텍처란?</h2>
<ul>
  <li>아키텍처의 목적 : 시스템의 생명주기를 지원하는 것</li>
  <li>좋은 아키텍처는 시스템을 쉽게 이해하고, 쉽게 개발하며, 쉽게 유지보수 하고, 또 쉽게 배포되개 해준다.</li>
  <li>아키텍처의 궁극적 목표 : 시스템 수명에 대한 비용 최고화. 프로그래머의 생산성 최대화.</li>
</ul>

<h2 id="16장-독립성">16장. 독립성</h2>
<ul>
  <li>좋은 아키텍처는?
    <ul>
      <li>시스템의 유즈 케이스 : 시스템의 아키텍처는 시스템의 의도를 지원 해야한다</li>
      <li>시스템의 운영 : 요구와 관련된 각 유즈케이스에 걸맞는 처리량과 응답시간을 보장해야 함</li>
      <li>시스템의 개발 : 각 개발팀이 독립적으로 행동하기 편한 아키텍처를 반드시 확보하여 개발하는 동안 팀들이 서로 방해하지 않도록 해야 함</li>
      <li>시스템의 배포 : 시스템에 빌드 된 후 즉각 배포 할 수 있도록 지원해야 함</li>
      <li>+++ 향 후 시스템 변경이 필요할 때 어떤 방향으로든 쉽게 변경 할 수 있어야 함</li>
    </ul>
  </li>
  <li>계층 설계 방법
    <ul>
      <li>‘단일 책임 원칙’ + ‘공통 폐쇄 원칙’ ⇢ 서로 결합되지 않은 수평적인 계층으로 분리</li>
    </ul>
  </li>
  <li>유즈케이스 결합 분리
    <ul>
      <li>시스템은 수평적 계층으로 분할 + 유즈케이스는 수직으로 분할. 단, 유즈케이스들이 각 계층에서 서로 겹치지 않아야 한다.</li>
    </ul>
  </li>
</ul>

<p><img src="https://github.com/ICoi/ICoi.github.io/blob/master/images/20210926_3-3.png?raw=true" width="100%" /></p>

<h2 id="17장-경계-선긋기">17장. 경계: 선긋기</h2>
<ul>
  <li>경계는 소프트웨어 요소를 서로 분리하고, 경계 한편에 있는 요소가 반대편에 있는 요소를 알지 못하게 함</li>
  <li>소프트웨어 아키텍처에서 경계선을 그리려면 먼저 시스템을 컴포넌트 단위로 분할해야 한다 ➢ 의존성 역전 원칙, 안정된 추상화 원칙 응용&lt;/br&gt;
 의존성 화살표는 저수준 세부사항에서 고수준의 추상화를 향하도록 배치</li>
</ul>

<h2 id="18장-경계해부학">18장. 경계해부학</h2>
<ul>
  <li>경계 단위 : 아래로 갈수록 물리적으로 명확한 경계 생김
    <ul>
      <li>소스코드 단위</li>
      <li>동적링크 라이브러리 단위</li>
      <li>스레드</li>
      <li>로컬 프로세스</li>
      <li>서비스</li>
    </ul>
  </li>
  <li>1개 이상의 경계 전략 활용</li>
</ul>

<h2 id="19장-정책과-수준">19장. 정책과 수준</h2>
<ul>
  <li>소프트웨어 시스템이란? 정책을 기술한 것</li>
  <li>좋은 아키텍처라면 각 컴포넌트를 연결할 때 의존성 방향이 컴포넌트의 수준을 기반으로 연결되도록 만들어야 한다.&lt;/br&gt;
즉, 저수준 컴포넌트가 고수준 컴포넌트에 의존하도록 설계되어야 한다.</li>
  <li>‘수준(Level)’ : ‘입력과 출력’까지의 거리 → 멀어질수록 고수준</li>
</ul>

<h2 id="20장-업무규칙">20장. 업무규칙</h2>
<ul>
  <li>업무규칙 : 사업적으로 수익을 얻거나 비용을 줄일 수 있는 규칙 또는 절차</li>
  <li>‘엔티티(Entity)’ : 핵심 업무 데이터 기반으로 동작하는 일련의 조그만 핵심 업무 규칙을 구체화 하는 것&lt;/br&gt;
    <ul>
      <li>엔티티 객체는 핵심 업무데이터를 직접 포함하거나 매우 쉽게 접근 할 수 있음&lt;/br&gt;</li>
      <li>엔티티는 고 수준의 개념이다.</li>
    </ul>
  </li>
  <li>‘유즈케이스(Use Case)’ : 자동화된 시스템이 사용되는 방법 설명
    <ul>
      <li>자동화된 시스템이 사용되는 방법 설명 → Application에 특화된 업무 규칙 설명</li>
      <li>입력데이터를 받아 출력 데이터를 생성. but 인터페이스에 의존 ✖︎</li>
      <li>유즈케이스는 저 수준의 개념이다.</li>
    </ul>
  </li>
  <li>저수준(유즈케이스) 개념은 고수준 (엔티티) 개념을 알고 있다.</li>
  <li>고수준 (엔티티) 개념은 저수준 (유즈케이스) 개념을 모른다.</li>
</ul>

<h2 id="21장-소리치는-아키텍처">21장. 소리치는 아키텍처</h2>
<ul>
  <li>웹은 아키텍처인가? <strong>NO!</strong> → 웹, 앱 등은 전달 메커니즘 (입출력 장치)</li>
  <li>즉, 아키텍처는 View나 Controller가 아닌 Model을 설계 해야 함</li>
</ul>

<h2 id="22장-클린-아키텍처">22장. 클린 아키텍처</h2>
<ul>
  <li>아키텍처의 목표 : ‘관심사의 분리’</li>
  <li>아키텍처는 모두 시스템의 다음과 같은 특징은 지니도록 만든다
    <ul>
      <li>프레임워크 독립성</li>
      <li>테스트 용이성</li>
      <li>UI 독립성</li>
      <li>데이터베이스 독립성</li>
      <li>모든 외부 에이전시에 대한 독립성</li>
    </ul>
  </li>
</ul>

<p><img src="https://github.com/ICoi/ICoi.github.io/blob/master/images/20210926_3-4.png?raw=true" width="100%" /></p>

<h2 id="23장-프레젠터와-험블-객체">23장. 프레젠터와 험블 객체</h2>
<ul>
  <li>행위 → 본질과 테스트하기 어려운 행위(험블객체)로 나눔</li>
  <li>프레젠터와 뷰, 데이터베이스와 게이트웨이, 서비스 리스너와 인터페이스 경계에 험블 객체 패턴이 숨어있다</li>
</ul>

<h2 id="24장-부분적-경계">24장. 부분적 경계</h2>
<ul>
  <li>코드 단위 분리</li>
  <li>일차원 경계</li>
  <li>Facade 패턴 활용</li>
</ul>

<h2 id="25장-계층과-경계">25장. 계층과 경계</h2>

<h2 id="26장-메인main-컴포넌트">26장. 메인(Main) 컴포넌트</h2>
<ul>
  <li>메인 컴포넌트
    <ul>
      <li>‘시스템의 초기 진입점’</li>
      <li>이 컴포넌트가 나머지 컴포넌트를 생성하고 조정하며 관리한다. &lt;/br&gt;
→ 의존성 주입 프레임워크를 이용해 의존성을 주입하는 일은 바로 메인 컴포넌트에서 이루어져야 함</li>
      <li>메인은 클린 아키텍처에서 가장 바깥 원에 위치하는 지저분한 저수준 모듈이라는 점.</li>
      <li>메인은 고수준의 시스템을 위한 모든 것을 로드 한 후, 제어권을 고수준의 시스템에게 넘긴다.</li>
    </ul>
  </li>
</ul>

<h2 id="27장-크고-작은-모든-서비스들">27장. ‘크고 작은 모든’ 서비스들</h2>

<h2 id="28장-테스트-경계">28장. 테스트 경계</h2>
<ul>
  <li>테스트는 아키텍처에서 가장 바깥쪽 원으로 생각 할 수 있다.</li>
  <li>시스템 내부의 어떤 것도 테스트에는 의존하지 않으며, 테스트는 시스템이 컴포넌트를 향해 항상 원의 안쪽으로 의존한다.</li>
  <li>또한 테스트는 독립적으로 배포 가능하다.</li>
  <li>시스템과 테스트를 설계 할 때, GUI를 사용하지 않고 업무 규칙을 테스트 할 수 있게 해야한다.</li>
</ul>

<h2 id="29장-클린-임베디드-아키텍처">29장. 클린 임베디드 아키텍처</h2>
<ul>
  <li>(생략..)</li>
</ul>]]></content><author><name>Daun Joung</name></author><category term="CleanArchitecture" /><category term="BookReview" /><summary type="html"><![CDATA[책 리뷰 - Clean Architecture 이 글은 Clean Architecture 책의 내용 일부를 발췌하여 작성하였습니다. 자세한 설명 및 내용은 도서를 참고하시면 됩니다.]]></summary></entry><entry><title type="html">How to Generate TOC</title><link href="http://localhost:4000/jekyll-gitbook/jekyll/2021-08-10-toc.html" rel="alternate" type="text/html" title="How to Generate TOC" /><published>2021-08-10T00:00:00+09:00</published><updated>2021-08-10T00:00:00+09:00</updated><id>http://localhost:4000/jekyll-gitbook/jekyll/toc</id><content type="html" xml:base="http://localhost:4000/jekyll-gitbook/jekyll/2021-08-10-toc.html"><![CDATA[<p>The jekyll-gitbook theme leverages <a href="https://github.com/allejo/jekyll-toc">jekyll-toc</a> to generate the <em>Contents</em> for the page.
The TOC feature is not enabled by default. To use the TOC feature, modify the TOC
configuration in <code class="language-plaintext highlighter-rouge">_config.yml</code>:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">toc</span><span class="pi">:</span>
    <span class="na">enabled</span><span class="pi">:</span> <span class="kc">true</span>
</code></pre></div></div>

<h2 id="why-this-repo">Why this repo</h2>

<p>long contents …..</p>

<ol>
  <li>a</li>
  <li>b</li>
  <li>c</li>
  <li>d</li>
</ol>

<h3 id="sub-title-1">Sub title 1</h3>

<h3 id="sub-title-2">Sub title 2</h3>

<h3 id="sub-title-3">Sub title 3</h3>

<h2 id="why-this-repo-1">Why this repo</h2>

<p>long contents …..</p>

<ul>
  <li>1</li>
  <li>2</li>
  <li>3</li>
  <li>4</li>
</ul>

<h2 id="why-this-repo-2">Why this repo</h2>

<p>long contents …..</p>

<ol>
  <li>e</li>
  <li>f</li>
  <li>g</li>
  <li>h</li>
</ol>

<h2 id="why-this-repo-3">Why this repo</h2>

<ul>
  <li>5</li>
  <li>6</li>
  <li>7</li>
  <li>8</li>
</ul>

<h2 id="why-this-repo-4">Why this repo</h2>

<p>long contents …..</p>

<ol>
  <li>a</li>
  <li>b</li>
  <li>c</li>
  <li>d</li>
</ol>

<h2 id="why-this-repo-5">Why this repo</h2>

<p>long contents …..</p>

<ul>
  <li>1</li>
  <li>2</li>
  <li>3</li>
  <li>4</li>
</ul>

<h2 id="why-this-repo-6">Why this repo</h2>

<p>long contents …..</p>

<ol>
  <li>e</li>
  <li>f</li>
  <li>g</li>
  <li>h</li>
</ol>

<h2 id="why-this-repo-7">Why this repo</h2>

<ul>
  <li>5</li>
  <li>6</li>
  <li>7</li>
  <li>8</li>
</ul>

<h2 id="why-this-repo-8">Why this repo</h2>

<p>long contents …..</p>

<ol>
  <li>a</li>
  <li>b</li>
  <li>c</li>
  <li>d</li>
</ol>

<h2 id="why-this-repo-9">Why this repo</h2>

<p>long contents …..</p>

<ul>
  <li>1</li>
  <li>2</li>
  <li>3</li>
  <li>4</li>
</ul>

<h2 id="why-this-repo-10">Why this repo</h2>

<p>long contents …..</p>

<ol>
  <li>e</li>
  <li>f</li>
  <li>g</li>
  <li>h</li>
</ol>

<h2 id="why-this-repo-11">Why this repo</h2>

<ul>
  <li>5</li>
  <li>6</li>
  <li>7</li>
  <li>8</li>
</ul>

<h2 id="why-this-repo-12">Why this repo</h2>

<p>long contents …..</p>

<ol>
  <li>a</li>
  <li>b</li>
  <li>c</li>
  <li>d</li>
</ol>

<h2 id="why-this-repo-13">Why this repo</h2>

<p>long contents …..</p>

<ul>
  <li>1</li>
  <li>2</li>
  <li>3</li>
  <li>4</li>
</ul>

<h2 id="why-this-repo-14">Why this repo</h2>

<p>long contents …..</p>

<ol>
  <li>e</li>
  <li>f</li>
  <li>g</li>
  <li>h</li>
</ol>

<h2 id="why-this-repo-15">Why this repo</h2>

<ul>
  <li>5</li>
  <li>6</li>
  <li>7</li>
  <li>8</li>
</ul>]]></content><author><name>Tao He</name></author><category term="Jekyll" /><summary type="html"><![CDATA[The jekyll-gitbook theme leverages jekyll-toc to generate the Contents for the page. The TOC feature is not enabled by default. To use the TOC feature, modify the TOC configuration in _config.yml:]]></summary></entry><entry><title type="html">Swift Package Manager 활용 (1) 외부 라이브러리 의존성 관리</title><link href="http://localhost:4000/jekyll-gitbook/2021-03-28-SwiftPackageManager.html" rel="alternate" type="text/html" title="Swift Package Manager 활용 (1) 외부 라이브러리 의존성 관리" /><published>2021-03-28T00:00:00+09:00</published><updated>2021-03-28T00:00:00+09:00</updated><id>http://localhost:4000/jekyll-gitbook/SwiftPackageManager</id><content type="html" xml:base="http://localhost:4000/jekyll-gitbook/2021-03-28-SwiftPackageManager.html"><![CDATA[<h1 id="swift-package-manager-활용-1-외부-라이브러리-의존성-관리">Swift Package Manager 활용 (1) 외부 라이브러리 의존성 관리</h1>

<h2 id="swift-package-manager이하-spm-란">Swift Package Manager(이하, SPM) 란?</h2>
<p>Swift로 작성된 코드의 Package의 배포, 적용 및 의존성을 관리하는 Manager로 활용되는 기능으로 설명하자면 아래와 같다.</p>
<ol>
  <li>CocoaPods을 대체하는 기능을 제공</li>
  <li>Swift로 작성된 코드들의 프로젝트를 대신함 (Xcode Project를 대신함)</li>
</ol>

<p>해당 글에선 언급된 기능 중 1번 CcoaPods을 대체하는 의존성 관리 측면에서 활용한 내용에 대해 작성하며, 2번에 해당하는 프로젝트 대신하는 기능은 언젠가 작성할 예정입니다.</p>

<h2 id="과거의-외부-라이브러리-의존성-관리는">과거의 외부 라이브러리 의존성 관리는?</h2>
<p>외부 라이브러리를 다운받고, 해당 라이브러리 적용에 필요한 설정들을 자동으로 적용하고, 외부 라이브러리 버전 업데이트 하는 모든 복잡한 과정을 CocoaPods을 활용하여 관리를 하는 것이 일반적이었다. 
과거 수동으로 진행하던 것에 비하면 CocoaPods를 사용하는 것은 확실히 편리하긴 했지만 굳이 단점이라면 pod install과 같은 명령어를 프로젝트 외부에서 수행해야한다는 것과, XCodeProject 가 아닌 xcworkspace 확장자를 가지는 워크스페이스를 사용해야만 한다는 점… Apple에서 정식으로 제공되는 프로그램이 아니다보니 어쩔 수 없이 Xcode 외부에 별도의 설치 및 수행 과정을 거치는 아주 소소한 번거로움이 있다.</p>

<h2 id="spm-도입-이유">SPM 도입 이유?</h2>
<p>이번 친구들과 개발하는 프로젝트에는 CocoaPods 대신 SPM을 활용하기로 했다.  그 이유는 거창한 무엇도 아닌 외부 프로그램 설치를 안해도 되고, XCode 내에서 할 수 있다는 점. <del>그리고 회사에서는 못해볼거 같아서..?</del></p>

<h2 id="spm-활용-방법">SPM 활용 방법</h2>
<p>SPM 활용 방법은 매우매우매우 쉽다.</p>
<ol>
  <li>외부 라이브러리의 저장소 URL을 확인합니다.
ex) Alamofire의 경우 github 주소인 https://github.com/Alamofire/Alamofire</li>
  <li>Xcode 메뉴에서 File -&gt; Swift Packages -&gt; Ad Package Dependency…  메뉴 선택
<img src="https://github.com/ICoi/ICoi.github.io/blob/master/images/202010328_SPM_1.png?raw=true" width="100%" />
3-1. 가져올 라이브러리의 저장소 URL을 입력 후 Next
<img src="https://github.com/ICoi/ICoi.github.io/blob/master/images/202010328_SPM_2.png?raw=true" width="100%" />
3-2. 적용할 외부 라이브러리의 버전, 브랜치 명 혹은 커밋 해쉬값을 입력 후 Next
<img src="https://github.com/ICoi/ICoi.github.io/blob/master/images/202010328_SPM_3.png?raw=true" width="100%" />
3-3. 실제 프로젝트에서 필요한 라이브러리만 선택 한 뒤 Next
<img src="https://github.com/ICoi/ICoi.github.io/blob/master/images/202010328_SPM_4.png?raw=true" width="100%" /></li>
</ol>

<p>혹시 추가한 라이브러리들을 제거 하거나 버전 편집이 필요하면 Project 타겟 선택 후 info 의 Package 항목에서 편집 및 삭제가 가능하다.
<img src="https://github.com/ICoi/ICoi.github.io/blob/master/images/202010328_SPM_5.png?raw=true" width="100%" /></p>

<h2 id="spm-사용-후기">SPM 사용 후기</h2>
<p>SPM 을 활용하는 것은 걱정 이상으로 너무 쉽고 간편했다. 평소 프로그램 설치시마다 남들은 겪지 않는 온갖 문제를 겪어 오는지라 무언가 설치 하는 것에 두려움이 있는데, 항상 사용하던 XCode 내에서 쉽고 편하게 할 수 있으니… 앞으로 다시는 CocoaPods으로 되돌아가지 않을것 같다는..</p>

<h2 id="다음-과제">다음 과제</h2>
<p>라이브러리를 제작하여 SPM을 통해 배포해보기.</p>]]></content><author><name>Daun Joung</name></author><category term="SwiftPackageManager" /><category term="SPM" /><category term="iOS" /><category term="Xcode" /><summary type="html"><![CDATA[Swift Package Manager 활용 (1) 외부 라이브러리 의존성 관리]]></summary></entry><entry><title type="html">2020년 회고</title><link href="http://localhost:4000/jekyll-gitbook/2020-12-26-Review2020.html" rel="alternate" type="text/html" title="2020년 회고" /><published>2020-12-26T00:00:00+09:00</published><updated>2020-12-26T00:00:00+09:00</updated><id>http://localhost:4000/jekyll-gitbook/Review2020</id><content type="html" xml:base="http://localhost:4000/jekyll-gitbook/2020-12-26-Review2020.html"><![CDATA[<h1 id="2020-회고">2020 회고</h1>

<h2 id="서문">서문</h2>
<p>스터디를 함께하는 친구의 제안으로 이 특별한 시점까지 열심히 달려온 내 자신을 되돌아 보고 칭찬해주는 회고를 진행하려고 합니다. 회고 파티를 회고해준 Pineoc의 글은 <a href="https://pineoc.github.io/blog/2020/12/26/2020-Retrospective-with-friends/?fbclid=IwAR1Nf0JsVyZN_M00DTa4NdzneoASpLeSPGbE38YVdL4rjlKGAB7lTjrn3zQ">링크</a>를 통해 확인 가능합니다.</p>

<h2 id="회고를-시작하기-전에">회고를 시작하기 전에..</h2>
<p>2020년은 돈 버는 개발자가 된지 만 5년이 되는 여러가지로 특별한 한해입니다.</p>

<p><img src="https://github.com/ICoi/ICoi.github.io/blob/master/images/2020_Review_MyHistory.png?raw=true" width="100%" /></p>

<p>과거 3~4년 주기로 항상 새로운 단계를 겪어왔습니다. 학교를 진급하거나, 동아리 활동 등을 진행하면서 매 단계마다 새로운 환경에서 짧고 굵게 최선을 다하고 그 결과물을 얻어 내는 단거리 경주에 익숙해왔습니다.</p>

<p>하지만 과거와는 달리 열심히 달려왔지만 직장인 신분은 끝이 없다고 느껴집니다. 4년차가 지나 5년차가 되서야 내가 있는 이 곳이 기존과 다름을 깨달았습니다. 끝이 없는 이 길에서 단거리 경기에 익숙한 내가 장거리 경기를 달리기 위하여 새로 수립해야할 전략은 무엇일지 그 답을 신기하게도 회고를 진행하면서 발견하였습니다.</p>

<p>몰아쓰는 나의 2020년 일기는 올해 진행하였던 회사와 개인적으로 진행한 일들에 대해 평가하고, 이를 바탕으로 내년에 나아가야할 방향에 대해 정리하려고 합니다.</p>

<h2 id="2020년-현재-내-상태">2020년 현재 내 상태</h2>

<h3 id="경력-및-업무">경력 및 업무</h3>
<ul>
  <li>2015년 12월 신입 공채 입사 후 무려 5년 (12월 14일 기준으로 딱 5년)이나 다닌 고인물</li>
</ul>

<h4 id="주업무">주업무</h4>
<ul>
  <li>모바일 게임 SDK 신규버전 iOS 유지보수</li>
  <li>신규 프로젝트에 iOS 개발 담당 진행 중</li>
</ul>

<h4 id="보조-업무">보조 업무</h4>
<ul>
  <li>Android 유지보수 서포트</li>
  <li>모바일 게임 SDK Unity 엔진 플러그인 유지보수</li>
  <li>업무 환경 개선 업무 진행</li>
</ul>

<h4 id="그-외">그 외</h4>
<ul>
  <li>대학시절부터 같이 프로젝트 하던 친구들과 6개월째 스터디(라 쓰고 각자 공부) 진행 중</li>
  <li>익숙함 속에서 새로운 도전을 시도하는 중</li>
</ul>

<h2 id="2020년-평가">2020년 평가</h2>

<h3 id="2020년-잘한일">2020년 잘한일</h3>
<ul>
  <li>팀 내 개발 편의를 위한 개발 환경 개선 진행
    <ul>
      <li>샘플 빌드 자동화 환경을 구축, 외부 라이브러리 참조 방식 변경, XCodeGen 도입</li>
      <li>누가 시킨 일은 아니였으나 스스로 작업 환경을 개선하고자 업무 틈틈히 진행하였으며 팀 내 개발 환경을 개선하는 밑거름이 됨</li>
    </ul>
  </li>
  <li>신규 프로젝트 자원하여 참여
    <ul>
      <li>Milestone 1 을 겨우 진행한 초기 단계라 개발 성과는 없지만, 새로운 도전을 시도하였다는 점에서 Good!</li>
      <li>‘유지보수’업무에서 벗어나 처음으로 0에서 부터 시작하는 개발을 진행하여 과정에서 기존에 겪지 못했던 새로운 경험을 할 것으로 기대됨</li>
    </ul>
  </li>
  <li>iOS 14 대응 및 Apple Silicon (M1) Chip 환경 대응
    <ul>
      <li>WWDC 2020 및 개발자 포럼을 참고하여 iOS 14의 신규, 변경 내용에 대해 정리 및 제안</li>
      <li>Apple Silicon (M1) Chip이 포함된 PC 환경과 기존 iOS 환경의 공통점과 차이점에 대해 파악하고, 환경에 맞는 개발 방향 제안</li>
      <li>단순히 새로움을 보는 것이 아니라 기술을 탐구하고 이를 바탕으로 개발 방향을 제안 하며 기술 시야를 넓힌 계기가 됨</li>
    </ul>
  </li>
</ul>

<h3 id="2020년-열심히-했지만-아쉬웠던-일">2020년 열심히 했지만 아쉬웠던 일</h3>
<ul>
  <li>모듈화 하는 작업 진행
    <ul>
      <li>잘한일
        <ul>
          <li>서비스 모듈화 설계 및 작업 진행</li>
        </ul>
      </li>
      <li>아쉬운 점
        <ul>
          <li>모듈간 호출 로직 및 함수 공개 범위 등에 대한 고민이 부족 (개발 설계 역량 부족)</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>회사 업무 (SDK 유지보수)
    <ul>
      <li>잘한일
        <ul>
          <li>작업한 내용 중 버그 발생 건수가 확연하게 줄어듬</li>
          <li>iOS 특성에 맞는 개발 방향 제안 및 기존의 기능 개선 방법 고민 진행</li>
        </ul>
      </li>
      <li>아쉬운 점
        <ul>
          <li>유지보수를 위한 설계등이 선행된 개발을 진행하지 못한 아쉬움 존재</li>
          <li>코드 리펙토링 및 개선 필요한 부분을 외면함…</li>
          <li>메모리 누수, 멀티 스레드 환경 등 개발 안정성에 대한 고민 부족</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>주력 언어 변경 (ObjectiveC -&gt; Swift)
    <ul>
      <li>잘한일
        <ul>
          <li>Swift의 기본 문법 및 사용에 익숙해짐</li>
        </ul>
      </li>
      <li>아쉬운 점
        <ul>
          <li>Swift 언어 특성에 맞는 개발 설계는 미숙 (Protocol 활용 등)</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>친구들과 하는 스터디
    <ul>
      <li>내가 진행한 공부
        <ul>
          <li>“GoF디자인 패턴” 책 : 자주 쓰이는 패턴 일부에 대한 학습 진행</li>
          <li>RxSwift : RxSwift의 개념에 대한 공부 진행</li>
        </ul>
      </li>
      <li>잘한일
        <ul>
          <li>지속적으로 참여하였음</li>
          <li>비슷한 분야에 종사하는 친구들의 이야기를 통해 간접 경험 획득</li>
        </ul>
      </li>
      <li>아쉬운 점
        <ul>
          <li>깊이있는 공부를 진행하지 못한 아쉬움</li>
          <li>공부한 내용을 정리하는 시간을 가지지 못한 것에 대한 아쉬움</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h3 id="2020년-부족했던-일-못한일">2020년 부족했던 일 (못한일)</h3>
<ul>
  <li>CI/CD를 CI/CD답게 사용해보고 싶었음
    <ul>
      <li>테스트 자동화 환경을 구축해보고 싶었으나 못함 (능력 부족)</li>
      <li>CI/CD를 직접 유지 보수 해보고 싶었으나 못함</li>
      <li>그 외 여러가지로 CI/CD를 활용해보고 싶었으나 못함</li>
    </ul>
  </li>
  <li>개인 프로젝트 가지기
    <ul>
      <li>회사내에선 다양한 이해관계로 인해 하지 못하는 작업들을 테스트 해볼 수 있는 개인 프로젝트를 가지고 싶었으나 못함 (의지 부족, 아이디어 부족)</li>
    </ul>
  </li>
</ul>

<h2 id="회고-정리">회고 정리</h2>

<h3 id="2020년-총평">2020년 총평</h3>
<blockquote>
  <p>2020년의 나는 회사에서의 ‘일’은 잘 하였지만, ‘일’을 잘 하기보단 일을 ‘잘’하는 사람이 되고 싶어했던 사람.</p>
</blockquote>

<p>회고록을 작성하다보니 공통점이 보였습니다. 일을 수행하는 것들에 대해서는 대체적으로 만족한 편이었으며, 그 와중에 새로운 시도도 끊임없이 해왔습니다. 다만, 개발 설계, 안정성 등 단순히 주어진 일을 하는 것 외에 개발을 ‘잘’하는 방법에 대한 부분은 대체적으로 부정적인 피드백을 작성하였습니다.</p>

<h3 id="그래서-내년의-나는">그래서 내년의 나는..?</h3>

<blockquote>
  <p>당장의 목표를 달성하기 위해 일을 하기보다는, 장기적인 관점에서 유지보수를 용이하게 하기 위한 코드 설계와 프로그램을 안정적으로 구현하기 위한 기초 동작 방식 고민에 대한 공부가 필요함</p>
</blockquote>

<p>내년의 나는 새로운 서비스를 만들기보단 좀 더 이론적이고 근본적인 기술 탐구에 집중해볼까 합니다. 내가 가진 습관에서 벗어나 다양한 사람들의 생각과 개발방향을 경험해 보고, 그들의 방법을 익혀 적용해보는 시간을 가져볼까 합니다. 사람들을 일일히 만나서 배우는 것에는 현실적인 한계가 있으므로, 다양한 개발자들의 코드가 있는 Github을 여행해보는 것을 최종 목표로 정하였습니다.</p>]]></content><author><name>Daun Joung</name></author><category term="Review" /><category term="2020" /><summary type="html"><![CDATA[2020 회고]]></summary></entry></feed>